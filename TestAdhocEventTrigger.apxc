@isTest
private class TestAdhocEventTrigger 
{
    
     Static Adhoc_Event__c TestEventsOnAdhocEvent()
    {
    	Adhoc_Event__c NewEvent = new Adhoc_Event__c();
        NewEvent.Name = 'Test';
        NewEvent.Subject__c = 'Testing the Trigger 1';
        DateTime startTime = DateTime.newInstance(2022,8,26,13,0,0);
        DateTime endTime = DateTime.newInstance(2022,8,26,14,0,0);
        NewEvent.Start_Date__c= startTime;
        NewEvent.End_Date__c=   endTime;
        NewEvent.Manager_Email__c = 'sufyanashraf5469@gmail.com';
        return NewEvent;            
    }
    
    @isTest
    Static void TestHttpRequestInsert()
    { 
        Test.startTest();
        AdhocEventTriggerHandler.mock = new MockHttpResponseGenerator();
        Database.SaveResult result = Database.insert(TestEventsOnAdhocEvent(), false);
        Test.stopTest();
        System.assert(result.isSuccess());
    }
    
    @isTest
    Static void TestHttpRequestUpdate()
    {
		
        Adhoc_Event__c Event = TestEventsOnAdhocEvent(); 
        Insert Event;
        Test.startTest();
        AdhocEventTriggerHandler.mock = new MockHttpResponseGenerator();
        Adhoc_Event__c obj = new Adhoc_Event__c();
      	obj = [Select id from Adhoc_Event__c where id =: Event.id];
        obj.Subject__c = 'Testing 2';
        update obj;
        Test.stopTest();
    }
    
    @isTest
    Static void TestHttpRequestDelete()
    {
       Adhoc_Event__c Event = TestEventsOnAdhocEvent(); 
       Insert Event;
       Test.startTest();
       AdhocEventTriggerHandler.mock = new MockHttpResponseGenerator();
       Adhoc_Event__c obj = [Select id from Adhoc_Event__c where id = :Event.id];
       Database.DeleteResult result = Database.Delete(obj, false);
       Test.stopTest();  
    }

}